import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

public class ExpenseTracker {
    private static final String DATA_FILE = "expenses.dat";
    private static ExpenseManager expenseManager = new ExpenseManager();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        expenseManager.loadData();

        while (true) {
            System.out.println("1. Register User");
            System.out.println("2. Add Expense");
            System.out.println("3. List Expenses");
            System.out.println("4. Category-wise Summary");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter username: ");
                    String username = scanner.nextLine();
                    expenseManager.registerUser(username);
                    break;
                case 2:
                    System.out.print("Enter username: ");
                    username = scanner.nextLine();
                    System.out.print("Enter date (YYYY-MM-DD): ");
                    String date = scanner.nextLine();
                    System.out.print("Enter category: ");
                    String category = scanner.nextLine();
                    System.out.print("Enter amount: ");
                    double amount = scanner.nextDouble();
                    scanner.nextLine();  // Consume newline
                    expenseManager.addExpense(username, date, category, amount);
                    break;
                case 3:
                    System.out.print("Enter username: ");
                    username = scanner.nextLine();
                    expenseManager.listExpenses(username);
                    break;
                case 4:
                    System.out.print("Enter username: ");
                    username = scanner.nextLine();
                    expenseManager.categoryWiseSummary(username);
                    break;
                case 5:
                    expenseManager.saveData();
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }

    // Nested User class
    private static class User {
        private String username;

        public User(String username) {
            this.username = username;
        }

        public String getUsername() {
            return username;
        }
    }

    // Nested Expense class
    private static class Expense {
        private String date;
        private String category;
        private double amount;

        public Expense(String date, String category, double amount) {
            this.date = date;
            this.category = category;
            this.amount = amount;
        }

        public String getDate() {
            return date;
        }

        public String getCategory() {
            return category;
        }

        public double getAmount() {
            return amount;
        }

        public static Date parseDate(String dateString) throws ParseException {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            return sdf.parse(dateString);
        }
    }

    // Nested ExpenseManager class
    private static class ExpenseManager {
        private Map<String, List<Expense>> userExpenses = new HashMap<>();

        public void registerUser(String username) {
            userExpenses.putIfAbsent(username, new ArrayList<>());
            System.out.println("User registered: " + username);
        }

        public void addExpense(String username, String date, String category, double amount) {
            List<Expense> expenses = userExpenses.get(username);
            if (expenses != null) {
                expenses.add(new Expense(date, category, amount));
                System.out.println("Expense added.");
            } else {
                System.out.println("User not found.");
            }
        }

        public void listExpenses(String username) {
            List<Expense> expenses = userExpenses.get(username);
            if (expenses != null) {
                for (Expense expense : expenses) {
                    System.out.println("Date: " + expense.getDate() + ", Category: " + expense.getCategory() + ", Amount: " + expense.getAmount());
                }
            } else {
                System.out.println("User not found.");
            }
        }

        public void categoryWiseSummary(String username) {
            List<Expense> expenses = userExpenses.get(username);
            if (expenses != null) {
                Map<String, Double> categoryTotals = new HashMap<>();
                for (Expense expense : expenses) {
                    categoryTotals.put(expense.getCategory(), categoryTotals.getOrDefault(expense.getCategory(), 0.0) + expense.getAmount());
                }
                for (Map.Entry<String, Double> entry : categoryTotals.entrySet()) {
                    System.out.println("Category: " + entry.getKey() + ", Total: " + entry.getValue());
                }
            } else {
                System.out.println("User not found.");
            }
        }

        public void saveData() {
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(DATA_FILE))) {
                oos.writeObject(userExpenses);
                System.out.println("Data saved.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void loadData() {
            try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(DATA_FILE))) {
                userExpenses = (Map<String, List<Expense>>) ois.readObject();
                System.out.println("Data loaded.");
            } catch (IOException | ClassNotFoundException e) {
                e.printStackTrace();
            }
        }
    }
}
